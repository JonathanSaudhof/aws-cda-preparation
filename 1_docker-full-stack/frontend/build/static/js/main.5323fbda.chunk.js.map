{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendUri","process","BACKEND_URI","TodoItem","_id","content","done","handleDone","timestamp","handleDelete","className","htmlFor","type","onChange","id","checked","onClick","App","useState","todoInput","setTodoInput","todoData","setTodoData","refreshData","a","axios","get","then","doc","data","catch","err","console","log","message","useEffect","event","target","put","error","delete","action","method","onSubmit","preventDefault","trim","length","post","alert","name","value","placeholder","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sKCKrCC,EAAaC,mHAAYC,aAAe,6BAExCC,EAAW,SAAC,GAOX,IANLC,EAMI,EANJA,IACAC,EAKI,EALJA,QACAC,EAII,EAJJA,KAEAC,GAEI,EAHJC,UAGI,EAFJD,YACAE,EACI,EADJA,aAEA,OACE,yBAAKC,UAAU,uBACb,2BAAOC,QAASP,EAAKM,UAAU,mBAC7B,2BAAOE,KAAK,WAAWC,SAAUN,EAAYO,GAAIV,EAAKW,QAAST,IAC9DD,GAEH,4BAAQW,QAASP,EAAcK,GAAIV,GAAnC,YAwGSa,MAjGf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAW,uCAAG,sBAAAC,EAAA,sEACLC,IACVC,IAAI,8BACJC,MAAK,SAACC,GACLN,EAAYM,EAAIC,SAEjBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAIG,YANhB,mFAAH,qDASjBC,qBAAU,WAERZ,MACC,IAEH,IAoBMhB,EAAa,SAAC6B,GAEbA,EAAMC,OAAOvB,IAGlBW,IACGa,IADH,UACUtC,EADV,YACwBoC,EAAMC,OAAOvB,IAAM,CACvCR,KAAM8B,EAAMC,OAAOtB,UAEpBY,MAAK,WACJ,OAAOJ,OAERI,OACAG,OAAM,SAACC,GAAD,OAASC,QAAQO,MAAMR,EAAIG,aAGhCzB,EAAe,SAAC2B,GAEfA,EAAMC,OAAOvB,IAGlBW,IACGe,OADH,UACaxC,EADb,YAC2BoC,EAAMC,OAAOvB,KACrCa,MAAK,WACJ,OAAOJ,OAERI,OACAG,OAAM,SAACC,GAAD,OAASC,QAAQO,MAAMR,EAAIG,aAGtC,OACE,yBAAKxB,UAAU,OACb,sDACA,yBAAKA,UAAU,kBACb,0BAAM+B,OAAO,SAASC,OAAO,OAAOC,SAtDrB,SAACP,GACpBA,EAAMQ,iBACY,OAAdzB,GAAkD,IAA5BA,EAAU0B,OAAOC,QAI3CrB,IACGsB,KAAK/C,EAAY,CAAEK,QAASc,IAC5BQ,MAAK,SAACC,GAGL,OADAR,EAAa,IACNG,OAERI,MAAK,WACJK,QAAQC,IAAI,gBAEbH,OAAM,SAACC,GAAD,OAASC,QAAQO,MAAMR,MAChCR,KAdEyB,MAAM,iCAoDF,2BACEpC,KAAK,OACLqC,KAAK,OACLC,MAAO/B,EACPgC,YAAY,QACZtC,SAAU,SAACuB,GACThB,EAAagB,EAAMC,OAAOa,UAG9B,2BAAOtC,KAAK,SAASsC,MAAM,SAE5B7B,EAAS+B,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,eACEC,IAAKD,EAAKjD,KACNiD,EAFN,CAGE9C,WAAYA,EACZE,aAAcA,WCzGN8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAS,GACLP,QAAQO,MAAMA,EAAML,c","file":"static/js/main.5323fbda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst backendUri = process.env.BACKEND_URI || \"http://127.0.0.1:3000/todo\";\n\nconst TodoItem = ({\n  _id,\n  content,\n  done,\n  timestamp,\n  handleDone,\n  handleDelete,\n}) => {\n  return (\n    <div className='todo-item-container'>\n      <label htmlFor={_id} className='todo-item-label'>\n        <input type='checkbox' onChange={handleDone} id={_id} checked={done} />\n        {content}\n      </label>\n      <button onClick={handleDelete} id={_id}>\n        Delete\n      </button>\n    </div>\n  );\n};\n\nfunction App() {\n  const [todoInput, setTodoInput] = useState(\"\");\n  const [todoData, setTodoData] = useState([]);\n\n  const refreshData = async () => {\n    return await axios\n      .get(\"http://127.0.0.1:3000/todo\")\n      .then((doc) => {\n        setTodoData(doc.data);\n      })\n      .catch((err) => console.log(err.message));\n  };\n\n  useEffect(() => {\n    // setTodoData(todos);\n    refreshData();\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (todoInput === null || todoInput.trim().length === 0) {\n      alert(\"Input field cannot be empty\");\n      return;\n    }\n    axios\n      .post(backendUri, { content: todoInput })\n      .then((doc) => {\n        // console.log(\"created todo\", doc);\n        setTodoInput(\"\");\n        return refreshData();\n      })\n      .then(() => {\n        console.log(\"refreshed\");\n      })\n      .catch((err) => console.error(err));\n    refreshData();\n  };\n\n  const handleDone = (event) => {\n    // console.log(\"id\", event.target.id, \"checked\", event.target.checked);\n    if (!event.target.id) {\n      return;\n    }\n    axios\n      .put(`${backendUri}/${event.target.id}`, {\n        done: event.target.checked,\n      })\n      .then(() => {\n        return refreshData();\n      })\n      .then()\n      .catch((err) => console.error(err.message));\n  };\n\n  const handleDelete = (event) => {\n    // console.log(\"id\", event.target.id, \"checked\", event.target.checked);\n    if (!event.target.id) {\n      return;\n    }\n    axios\n      .delete(`${backendUri}/${event.target.id}`)\n      .then(() => {\n        return refreshData();\n      })\n      .then()\n      .catch((err) => console.error(err.message));\n  };\n\n  return (\n    <div className='App'>\n      <h1>My First Todo-App Ever</h1>\n      <div className='todo-container'>\n        <form action='submit' method='post' onSubmit={handleSubmit}>\n          <input\n            type='text'\n            name='todo'\n            value={todoInput}\n            placeholder='to do'\n            onChange={(event) => {\n              setTodoInput(event.target.value);\n            }}\n          />\n          <input type='submit' value='add' />\n        </form>\n        {todoData.map((item) => (\n          <TodoItem\n            key={item._id}\n            {...item}\n            handleDone={handleDone}\n            handleDelete={handleDelete}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}